generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Menus {
  id                     Int                      @id @default(autoincrement())
  name                   String
  price                  Int?                     @default(0)
  createdAt              DateTime                 @default(now())
  imageUrl               String?
  isArchived             Boolean                  @default(false)
  updatedAt              DateTime                 @updatedAt
  DisabledLocationsMenus DisabledLocationsMenus[]
  menuAddonCategories    MenuAddonCategories[]
  menuCategoriesMenus    MenuCategoriesMenus[]
  Orders                 Orders[]
}

model MenuCategories {
  id                              Int                               @id @default(autoincrement())
  name                            String
  companyId                       Int
  createdAt                       DateTime                          @default(now())
  isArchived                      Boolean                           @default(false)
  updatedAt                       DateTime                          @updatedAt
  DisabledLocationsMenuCategories DisabledLocationsMenuCategories[]
  company                         Company                           @relation(fields: [companyId], references: [id])
  menuCategoriesMenus             MenuCategoriesMenus[]
}

model MenuCategoriesMenus {
  id             Int            @id @default(autoincrement())
  menuId         Int
  menuCategoryId Int
  createdAt      DateTime       @default(now())
  isArchived     Boolean        @default(false)
  updatedAt      DateTime       @updatedAt
  menuCategory   MenuCategories @relation(fields: [menuCategoryId], references: [id])
  menu           Menus          @relation(fields: [menuId], references: [id])
}

model MenuAddonCategories {
  id              Int             @id @default(autoincrement())
  menuId          Int
  addonCategoryId Int
  createdAt       DateTime        @default(now())
  isArchived      Boolean         @default(false)
  updatedAt       DateTime        @updatedAt
  addonCategory   AddonCategories @relation(fields: [addonCategoryId], references: [id])
  menu            Menus           @relation(fields: [menuId], references: [id])
}

model AddonCategories {
  id                  Int                   @id @default(autoincrement())
  name                String
  isRequired          Boolean?              @default(false)
  createdAt           DateTime              @default(now())
  isArchived          Boolean               @default(false)
  updatedAt           DateTime              @updatedAt
  addons              Addons[]
  menuAddonCategories MenuAddonCategories[]
}

model Addons {
  id              Int             @id @default(autoincrement())
  name            String
  price           Int?            @default(0)
  isAvailable     Boolean?        @default(true)
  addonCategoryId Int
  createdAt       DateTime        @default(now())
  isArchived      Boolean         @default(false)
  updatedAt       DateTime        @updatedAt
  addonCategory   AddonCategories @relation(fields: [addonCategoryId], references: [id])
  OrdersAddons    OrdersAddons[]
}

model Company {
  id             Int              @id @default(autoincrement())
  name           String
  streetAddress  String?         
  city           String?          
  state          String?          
  phoneNumber    Int?          
  email          String?          @unique
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  isArchived     Boolean          @default(false)
  locations      Locations[]
  menucategories MenuCategories[]
  users          Users[]
}


model Users {
  id               Int                @id @default(autoincrement())
  name             String
  email            String
  companyId        Int
  createdAt        DateTime           @default(now())
  isArchived       Boolean            @default(false)
  updatedAt        DateTime           @updatedAt
  SelectedLocation SelectedLocation[]
  company          Company            @relation(fields: [companyId], references: [id])
}

model Locations {
  id                              Int                               @id @default(autoincrement())
  name                            String
  companyId                       Int
  createdAt                       DateTime                          @default(now())
  isArchived                      Boolean                           @default(false)
  updatedAt                       DateTime                          @updatedAt
  DisabledLocationsMenuCategories DisabledLocationsMenuCategories[]
  DisabledLocationsMenus          DisabledLocationsMenus[]
  company                         Company                           @relation(fields: [companyId], references: [id])
  SelectedLocation                SelectedLocation[]
  tables                          Tables[]
}

model Tables {
  id             Int       @id @default(autoincrement())
  name           String
  locationId     Int
  qrCodeImageUrl String
  createdAt      DateTime  @default(now())
  isArchived     Boolean   @default(false)
  updatedAt      DateTime  @updatedAt
  Orders         Orders[]
  location       Locations @relation(fields: [locationId], references: [id])
}

model SelectedLocation {
  id         Int       @id @default(autoincrement())
  userId     Int
  locationId Int
  createdAt  DateTime  @default(now())
  isArchived Boolean   @default(false)
  updatedAt  DateTime  @updatedAt
  location   Locations @relation(fields: [locationId], references: [id])
  user       Users     @relation(fields: [userId], references: [id])
}

model DisabledLocationsMenuCategories {
  id             Int            @id @default(autoincrement())
  locationId     Int
  menuCategoryId Int
  createdAt      DateTime       @default(now())
  isArchived     Boolean        @default(false)
  updatedAt      DateTime       @updatedAt
  location       Locations      @relation(fields: [locationId], references: [id])
  menuCategory   MenuCategories @relation(fields: [menuCategoryId], references: [id])
}

model DisabledLocationsMenus {
  id         Int       @id @default(autoincrement())
  locationId Int
  menuId     Int
  createdAt  DateTime  @default(now())
  isArchived Boolean   @default(false)
  updatedAt  DateTime  @updatedAt
  location   Locations @relation(fields: [locationId], references: [id])
  menu       Menus     @relation(fields: [menuId], references: [id])
}

model Orders {
  id           Int            @id @default(autoincrement())
  menuId       Int
  quantity     Int
  tableId      Int
  status       ORDERSTATUS    @default(CART)
  isArchived   Boolean        @default(false)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  menu         Menus          @relation(fields: [menuId], references: [id])
  table        Tables         @relation(fields: [tableId], references: [id])
  OrdersAddons OrdersAddons[]
}

model OrdersAddons {
  id      Int    @id @default(autoincrement())
  orderId Int
  addonId Int
  addon   Addons @relation(fields: [addonId], references: [id])
  order   Orders @relation(fields: [orderId], references: [id])
}

enum ORDERSTATUS {
  CART
  PENDING
  COOKING
  COMPLETE
}
