// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Menus {
  id                     Int                      @id @default(autoincrement())
  name                   String
  price                  Int?                     @default(0)
  imageUrl               String?
  menuCategoriesMenus    MenuCategoriesMenus[]
  menuAddonCategories    MenuAddonCategories[]
  DisabledLocationsMenus DisabledLocationsMenus[]
  isArchived     Boolean        @default(false)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model MenuCategories {
  id                              Int                               @id @default(autoincrement())
  name                            String
  menuCategoriesMenus             MenuCategoriesMenus[]
  companyId                       Int
  company                         Company                         @relation(fields: [companyId], references: [id])
  DisabledLocationsMenuCategories DisabledLocationsMenuCategories[]
  isArchived     Boolean        @default(false)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model MenuCategoriesMenus {
  id             Int            @id @default(autoincrement())
  menuId         Int
  menu           Menus          @relation(fields: [menuId], references: [id])
  menuCategoryId Int
  menuCategory   MenuCategories @relation(fields: [menuCategoryId], references: [id])
  isArchived     Boolean        @default(false)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model MenuAddonCategories {
  id              Int             @id @default(autoincrement())
  menuId          Int
  menu            Menus           @relation(fields: [menuId], references: [id])
  addonCategoryId Int
  addonCategory   AddonCategories @relation(fields: [addonCategoryId], references: [id])
  isArchived     Boolean        @default(false)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model AddonCategories {
  id                  Int                   @id @default(autoincrement())
  name                String
  isRequired          Boolean?              @default(false)
  menuAddonCategories MenuAddonCategories[]
  addons              Addons[]
  isArchived     Boolean        @default(false)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model Addons {
  id              Int             @id @default(autoincrement())
  name            String
  price           Int?            @default(0)
  isAvailable     Boolean?        @default(true)
  addonCategoryId Int
  addonCategory   AddonCategories @relation(fields: [addonCategoryId], references: [id])
  isArchived     Boolean        @default(false)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model Company {
  id             Int              @id @default(autoincrement())
  name           String
  users          Users[]
  menucategories MenuCategories[]
  locations      Locations[]
  isArchived     Boolean        @default(false)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model Users {
  id               Int                @id @default(autoincrement())
  name             String
  email            String
  companyId        Int
  company          Company            @relation(fields: [companyId], references: [id])
  SelectedLocation SelectedLocation[]
  isArchived     Boolean        @default(false)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model Locations {
  id                              Int                               @id @default(autoincrement())
  name                            String
  companyId                       Int
  company                         Company                           @relation(fields: [companyId], references: [id])
  tables                          Tables[]
  SelectedLocation                SelectedLocation[]
  DisabledLocationsMenuCategories DisabledLocationsMenuCategories[]
  DisabledLocationsMenus          DisabledLocationsMenus[]
  isArchived     Boolean        @default(false)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model Tables {
  id         Int       @id @default(autoincrement())
  name       String
  locationId Int
  qrCodeImageUrl String
  location   Locations @relation(fields: [locationId], references: [id])
  isArchived     Boolean        @default(false)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model SelectedLocation {
  id         Int       @id @default(autoincrement())
  userId     Int
  locationId Int
  user       Users     @relation(fields: [userId], references: [id])
  location   Locations @relation(fields: [locationId], references: [id])
  isArchived     Boolean        @default(false)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model DisabledLocationsMenuCategories {
  id             Int            @id @default(autoincrement())
  locationId     Int
  menuCategoryId Int
  location       Locations      @relation(fields: [locationId], references: [id])
  menuCategory   MenuCategories @relation(fields: [menuCategoryId], references: [id])
  isArchived     Boolean        @default(false)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model DisabledLocationsMenus {
  id         Int       @id @default(autoincrement())
  locationId Int
  menuId     Int
  location   Locations @relation(fields: [locationId], references: [id])
  menu       Menus     @relation(fields: [menuId], references: [id])
  isArchived     Boolean        @default(false)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}
